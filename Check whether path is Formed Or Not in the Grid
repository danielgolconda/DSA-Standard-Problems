/*
Given a N X N matrix (M) filled with 1, 0, 2, 3. The task is to find whether there is a path possible from source to destination, while traversing through blank cells only. You can traverse up, down, right and left.

A value of cell 1 means Source.
A value of cell 2 means Destination.
A value of cell 3 means Blank cell.
A value of cell 0 means Blank Wall.
Note: there is only single source and single destination.

 

Input:
The first line of input is an integer T denoting the no of testcases. Then T test cases follow. Each test case consists of 2 lines. The first line of each test case contains an integer N denoting the size of the square matrix. Then in the next line are N*N space separated values of the matrix (M).

Output:
For each test case in a new line print 1 if the path exist from source to destination else print 0.

Constraints:
1 <= T <= 20
1 <= N <= 20

Example:
Input:
2
4
3 0 0 0 0 3 3 0 0 1 0 3 0 2 3 3 
3
0 3 2 3 0 0 1 0 0

Output:
1
0

Explanation:
Testcase 1: The matrix for the above given input is:
3 0 0 0
0 3 3 0
0 1 0 3
0 2 3 3
From the matrix we can see that there exists a path from to reach destination 2 from source 1.
Testcase 2: The matrix for the above given input is:
0 3 2
3 0 0
1 0 0
From the matrix we can see that there does not exists any path to reach destination 2 from source 1.
*/
#include <iostream>
#include <bits/stdc++.h>
#define lld long long int 
using namespace std;
int x;
int dfs(vector <int> adj[],vector <int> vis[],int i,int j,int n)
{
    if(i < 0 || i >= n || j < 0 || j >= n || adj[i][j] == 0 || vis[i][j] == 1)
    {
        return 0;
    }
    vis[i][j]=1;
    if(adj[i][j] == 2)
    {
        x+=1;
        return 1;
    }
    dfs(adj,vis,i+1,j,n);
    dfs(adj,vis,i,j+1,n);
    dfs(adj,vis,i-1,j,n);
    dfs(adj,vis,i,j-1,n);
}
int main() 
{
    int tc;
    cin >> tc;
    while(tc--)
    {
        int n;
    cin >> n;
    int a[n][n];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin >> a[i][j];
        }
    }
    vector <int> adj[n];
    vector <int> vis[n];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            adj[i].push_back(0);
            vis[i].push_back(0);
        }
    }
    x=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            adj[i][j] = a[i][j];
        }
    }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(adj[i][j] == 1)
                {
                   // cout<<"Go"<<endl;
                    x+=dfs(adj,vis,i,j,n);
                }
            }
        }
        if(x == 0)
        {
            cout<<x<<endl;
        }
        else if(x > 0)
        {
            cout<<1<<endl;
        }
    }
	return 0;
}
