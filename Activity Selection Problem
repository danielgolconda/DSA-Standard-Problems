/*

Given N activities with their start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.

Note : The start time and end time of two activities may coincide.

Input:
The first line contains T denoting the number of testcases. Then follows description of testcases. First line is N number of activities then second line contains N numbers which are starting time of activies.Third line contains N finishing time of activities.

Output:
For each test case, output a single number denoting maximum activites which can be performed in new line.

Constraints:
1<=T<=50
1<=N<=1000
1<=A[i]<=100

Example:
Input:
2
6
1 3 2 5 8 5
2 4 6 7 9 9
4
1 3 2 5
2 4 3 6

Output:
4
4

*/


#include <iostream>
#include <bits/stdc++.h>
#define lld long long int 
using namespace std;
int ActivitySel(int start[],int end[],int n)
{
    vector <pair<int,int>> v;
    vector <pair<int,int>> x;
    for(int i=0;i<n;i++)
    {
        v.push_back(make_pair(end[i],start[i]));
    }
    sort(v.begin(),v.end());
    for(int i=0;i<n;i++)
    {
        x.push_back(make_pair(v[i].second,v[i].first));
    }
    v.clear();
    int c=1;
    int e=x[0].second;
    for(int i=1;i<n;i++)
    {
      if(x[i].first >= e)
      {
          c+=1;
          e=x[i].second;
      }
    }
    return c;
}
int main() 
{
    int tc;
    cin >> tc;
    while(tc--)
    {
        int n;
        cin >> n;
        int start[n],end[n];
        for(int i=0;i<n;i++)
        {
            cin >> start[i];
        }
        for(int i=0;i<n;i++)
        {
            cin >> end[i];
        }
    int x=ActivitySel(start,end,n);
    cout<<x<<endl;
    }
	return 0;
}
