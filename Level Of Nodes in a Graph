/*
Given an undirected graph of N edges and a node X is given. The task is to find the level of X. if X does not exist in the graph then print -1.
Input: 
First line of input contains number of testcases T. For each testcase, first line of input contains number of nodes and edges N and E. Next E lines contais U and V, which represents that there is an edge between U and V. The final line contains X whose level we have to find.

Output:
For each testcase, print the level of the given node X.

Constraints:
1 <= T <= 100
1 <= E, N <= 104
1 <= X <= 104

Example:
Input:
1
8 8
0 1
0 2
1 3
1 4
1 5
2 6
6 7
2 5
7

Output:
3

Explanation:
Testcases 1: In the given graph(above), 7 is at 3rd level starting from source node 0 which is at 0th level.
*/



#include <iostream>
#include <bits/stdc++.h>
using namespace std;
vector <int> adj[100000];
int main() 
{
    int tc;
    cin >> tc;
    while(tc--)
    {
        int n,m;
        cin >> n >> m;
        for(int i=0;i<m;i++)
        {
            int x,y;
            cin >> x >> y;
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
        int l;
        cin >> l;
        queue <int> q;
        vector <int> vis(n,0);
        q.push(0);
        vis[0]=0;
        int h[100000]={0};
        while(!q.empty())
        {
            int f=q.front();
            q.pop();
            vis[f]=1;
            for(int u:adj[f])
            {
                if(!vis[u])
                {
                    q.push(u);
                    h[u]=h[f]+1;
                }
            }
        }
        if(h[l] == 0 && l!= 0)
        {
            cout<<-1<<endl;
        }
        else
        {
            cout<<h[l]<<endl;
        }
    }
	return 0;
}
